package vacationDiaryPart2;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class VacationDiaryPart2 {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        List<String[]> tableData = new ArrayList<>();
        String[] headers = {"Date", "City", "Country", "Days", "Mode"};
        int[] columnWidths = getColumnWidths(headers);

        while (true) {
            System.out.print("Enter date visit started (mmddyyyy) or 'End' to terminate the loop: ");
            String dateInput = scanner.nextLine();
            if ("End".equalsIgnoreCase(dateInput)) {
                break;
            }
            String formattedDate = validateAndFormatDate(dateInput);
            if (formattedDate == null) continue; // Re-prompt if validation fails
            System.out.print("Enter the city visited: ");
            String city = validateAndFormatCityCountry(scanner.nextLine(), true);
            System.out.print("Enter the country visited: ");
            String country = validateAndFormatCityCountry(scanner.nextLine(), false);
            System.out.print("Enter the number of days: ");
            int days = validateAndFormatDays(scanner.nextLine());
            if (days == -1) continue; // Re-prompt if validation fails
            System.out.print("Enter the mode of travel (car, plane, ship, train, bus): ");
            String modeOfTravel = validateModeOfTravel(scanner.nextLine());
            if (modeOfTravel == null) continue; // Re-prompt if validation fails

            String[] row = {formattedDate, city, country, String.valueOf(days), modeOfTravel};
            tableData.add(row);
        }

        printHeaderLine(columnWidths);
        System.out.println("\n======================Vacation Diary======================");
        printHeaders(headers, columnWidths);
        printHeaderLine(columnWidths);

        for (String[] row : tableData) {
            printRow(row, columnWidths);
        }

        printHeaderLine(columnWidths);
        scanner.close();
    }

    private static void printHeaderLine(int[] columnWidths) {
        for (int width : columnWidths) {
            for (int i = 0; i < width + 2; i++) {
                System.out.print("=");
            }
            System.out.print("=");
        }
        System.out.println();
    }

    private static void printHeaders(String[] headers, int[] columnWidths) {
        for (int i = 0; i < headers.length; i++) {
            System.out.print("| " + headers[i]);
            for (int j = 0; j < columnWidths[i] - headers[i].length(); j++) {
                System.out.print(" ");
            }
        }
        System.out.println("|");
    }

    private static void printRow(String[] row, int[] columnWidths) {
        for (int i = 0; i < row.length; i++) {
            System.out.print("| " + row[i]);
            for (int j = 0; j < columnWidths[i] - row[i].length(); j++) {
                System.out.print(" ");
            }
        }
        System.out.println("|");
    }

    private static int[] getColumnWidths(String[] headers) {
        int[] columnWidths = new int[headers.length];

        for (int i = 0; i < headers.length; i++) {
            columnWidths[i] = headers[i].length();
        }

        return columnWidths;
    }

    private static String validateAndFormatDate(String date) {
        if (!date.matches("\\d{8}")) {
            System.out.println("Invalid date format. Please enter as mmddyyyy.");
            return null;
        }
        return date.substring(0, 2) + "/" + date.substring(2, 4) + "/" + date.substring(4);
    }

    private static int validateAndFormatDays(String daysInput) {
        try {
            int days = Integer.parseInt(daysInput);
            if (days < 1 || days > 30) {
                System.out.println("Number of days must be between 1 and 30.");
                return -1;
            }
            return days;
        } catch (NumberFormatException e) {
            System.out.println("Invalid input for days. Please enter a numeric value.");
            return -1;
        }
    }

    private static String validateAndFormatCityCountry(String input, boolean isCity) {
        if (input.length() > 15) {
            return input.substring(0, 15);
        } else {
            return String.format("%-15s", input);
        }
    }

    private static String validateModeOfTravel(String mode) {
        String[] validModes = {"car", "plane", "ship", "train", "bus"};
        for (String validMode : validModes) {
            if (validMode.equalsIgnoreCase(mode)) {
                return mode;
            }
        }
        System.out.println("Invalid mode of travel. Please enter one of the following: car, plane, ship, train, bus.");
        return null;
    }
}
